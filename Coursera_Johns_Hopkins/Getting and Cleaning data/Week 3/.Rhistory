paste('Bonjour j\'ai ', scan(nmax=1), ' ans')
paste('Bonjour j\'ai', scan(nmax=1), 'ans')
paste('a','b','c','d')
paste('a','b','c','d',sep='')
variable <- "bonjour"
cariable
variable
toupper(substr(variable,2,nchar(variable)-1)
toupper(substr(variable,2,nchar(variable)-1))
toupper(substr(variable,2,(nchar(variable)-1)))
toupper(substr(variable,2,nchar(variable)-1))
ls
ls()
q(yes)
q("yes")
source("C:\\Users\\sya\\Desktop\\R\\test.R")
source("C:\Users\sya\Desktop\R")
source("Users\sya\Desktop\R")
source("Users/sya/Desktop/R")
source("Users/sya/Desktop/R/test*")
source("Users/sya/Desktop/R/test.R")
source("/Users/sya/Desktop/R/test.R")
ls()
getwd()
a <-42
ls()
q()
ls()
load("C:\\Users\\sya\\Desktop\\Learning-R\\.RData")
ls()
athletes <- list(Didier=c(630, 625, 628, 599, 635, 633, 622), Jules=c(610, 590, 595, 582, 601, 603), Pierre=c(644, 638, 639, 627, 642, 633, 639), Matthieu=c(622, 625, 633, 641, 610), Georges=c(561, 572, 555, 569, 653, 549, 558, 561), Khaled=c(611, 621, 619, 618, 623, 614, 623), Guillaume=c(599, 601, 612, 609, 607, 608, 594), Hermann=c(624, 630, 631, 629, 634, 618, 622), Carlos=c(528, 531, 519, 533, 521), Keith=c(513))
athletes
names(athletes)
length(athletes=
length(athletes)=
length(athletes)
athletes[1]
is.vector(athletes)
athletes[[1]]
is.factor(athletes)
is.list(athletes)
atheltes["Herman"]
atheltes["Hermann"]
athletes["Hermann"]
athletes[["Hermann"]]
athletes$Kaled
athletes$Khaled
athletes$Khal
athletes$Kha
athletes$Kh
athletes$K
names(athletes=
)
names(athletes)
sort(athletes$Guillaume)[1:3]
athletes$Guillaume
lapply(athletes,min(),na.rm=T)
lapply(athletes,min,na.rm=T)
lapply(athletes,mean,na.rm=T)
lapply(athletes,max,na.rm=T)
lapply(athletes,length,na.rm=T)
lapply(athletes,length)
is.vector(lapply(athletes,length))
is.list(lapply(athletes,length))
is.factor(lapply(athletes,length))
sort(lapply(athletes,mean,na.rm=T))
lapply(athletes,mean,na.rm=T)
is.vector(lapply(athletes,mean,na.rm=T))
summary(lapply(athletes,mean,na.rm=T))
> sapply(athletes, mean)
   Didier     Jules    Pierre  Matthieu   Georges    Khaled Guillaume   Hermann    Carlos     Keith 
sapply(athletes,mean,na.rm=T)
sort(sapply(athletes,mean,na.rm=T))
sort(-sapply(athletes,mean,na.rm=T))
-sort(-sapply(athletes,mean,na.rm=T))
summary(sapply(athletes,mean,na.rm=T))
sapply(athletes,summary)
is.matrix(sapply(athletes,summary))
is.vector(sapply(athletes,summary))
is.factor(sapply(athletes,summary))
is.list(sapply(athletes,summary))
lapply(athletes,summary)
is.vector(lapply(athletes,summary))
is.list(lapply(athletes,summary))
is.factor(lapply(athletes,summary))
is.matrix(lapply(athletes,summary))
cor.test(athletes$Didier, athletes$Pierre)
is.list(cor.test(athletes$Didier, athletes$Pierre))
is.vector(cor.test(athletes$Didier, athletes$Pierre))
test
cor.test(athletes$Didier, athletes$Pierre)->test
is.list(test)
names(test)
str(test)
is.vector()
is.vector(x)
is.vector
is.vector(resultats)
is.vector(resultats, mode="any")
is.vector(resultats, mode="")
is.vector(resultats, mode=)
help(is.vector)
is.vector(athletes)
is.vector(athletes, mode="any")
is.vector(athletes, mode="numeric")
is.vector(athletes, mode="character")
is.vector(athletes, mode="vector")
is.vector(athletes, mode="list")
save.image("C:\\Users\\sya\\Desktop\\Learning-R\\.RData")
q()
healp(paste)
help(paste)
q()
q
q('ask')
df
q()
source("C:\\Users\\sya\\Documents\\lastsave .R")
q()
x <- list(a = 1:5,b = rnorm(10))
x
a
lapply(x,mean)
mean(x)
help runif
help 'runif'
help(runif)
sapply(x,mean)
clf
clean
drop variables
ls
ls()
rm(ls())
rm.list(ls())
rm(list(ls))
rm(list(ls()))
rm(ls(a=TRUE))
rm(ls(all=TRUE))
rm(list=ls(all=TRUE))
x =1
rm(list=ls())
c(2,2,10)
rnorm(2*2*10)
a <- array(rnorm(2*2*10),c(2,2,10))
a
help(gl)
vector <- c(1,2,3,4,5)
tapply(vector,1,vector)
tapply(vector,1:5,vector)
help(interaction)
f1 <- gl(2,5)
f2 w- gl(5,2)
f1
f2
f2 <- gl(5,2)
f2
interaction(f1,f2)
f3 <- (3,3)
f3 <- gl(3,3)
f3
interaction(f1,f3)
numeric()
x <- numeric(10)
x
y <- matrix()
y
type(y)
is.type(y)
class(x)
class(y)
source('C:/Users/sya/Desktop/Learning-R/scripts/functions.R')
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/makeCacheMatrix.R')
pwd
getwd
getwd()
x <- matrix(c(0,1),c(1,0))
xx
x
x <- c(c(0,1),c(1,0))
x
x <- c(c(0,1);c(1,0))
x <- cbind(c(0,1);c(1,0))
x <- cbind(c(0,1),c(1,0))
x
solve(x)
x*x
solve(x)
help(solve)
solve(x)
class(x)
as.real(x)
as.integer(x)
x
as.numerical(x)
as.numeric(x)
x
solve(x,id)
solve(X)
solve(x)
View(x)
View(matrice)
View(mat)
View(x)
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
eigen(x)
eigen(x)$val
solve(x)
y <- rnorm(5)
y
y <- rnorm(5,5)
y
yhelp(rnorm)
help(rnorm)
y <- rnorm(c(5,5)
)
y
rep(5,5)
y <- mapply(rnorm,rep(5,5))
y
solve(y)
y*solve(y)
y
y %*% solve(y)
x
x %*% x
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
y
z
z <- makeCacheMatrix(y)
z
z$inv
z$get
z$get()
z$getInv()
cacheSolve(z)
z
z$inv
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
cacheSolve(z)
z
z$getInv()
z$inv
z$ze
x
x <- makeCacheMatrix(x)
x
x$getInv
x$getInv()
cacheSolve(x)
x
x$getInv()
cacheSolve(x)
x$get()
x$get()
x
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/makeCacheMatrix.R')
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
x
x <- cbind(c(0,1),c(1,0))
x
x <- makeCacheMatrix(x)
x
x$get()
z$get()
x$get()
x
z
A <- cbind(c(0,1),c(1,0))
A
A <- makeCacheMatrix(A)
A
A$get()
A <- makeCacheMatrix(A)
A <- cbind(c(0,1),c(1,0))
A
x <- makeCacheMatrix(A)
A
x
A$get()
x$get()
x$getInv()
cacheSolve(x)
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
x
x$getInv
x$getInv()
source('C:/Users/sya/Desktop/ProgrammingAssignment2/cachematrix.R')
## of the instance makeCacheMatrix
## If an existing stored inverse already exists, no
source('C:/Users/sya/Desktop/ProgrammingAssignment2/cachematrix.R')
y
b
b <- makeCacheMatrix(y)
b
b$getInv()
cacheSolve(b)
z$getInv
z$getInv()
b$getInv()
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
?iris
rm(list=ls())
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
A=[1,2,2,1,3,5,4,1,2]
A==1
A=c(1,2,2,1,3,5,4,1,2)
A==1
A(A==1)
A[A==1]
iris
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
iris["virginica"]
iris["species"]
iris["Species"]
"abc"=="cde"
"abc"=="abc"
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
iris[iris["Species"]=="Virginica","Sepal.length"]
iris["Species"]=="Virginica"
iris[iris["Species"]=="virginica","Sepal.length"]
iris["Species"]
iris["Species"]=="virginica"
iris["Species"]=="virginica"
iris[iris["Species"]=="virginica","Sepal.length"]
iris
iris[iris["Species"]=="virginica","sepal.length"]
iris[iris["Species"]=="virginica";"Sepal.length"
iris[iris["Species"]=="virginica";"Sepal.length"]
A=[1,2,3;2;5;6]
A=c(c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6))
A
A=cbind(c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6))
A
A(A[,1]==2)
A[,1]
A[,1]==2
A(A[,1]==2,2)
A[A[,1]==2,2]
iris[iris[,"Species"]=="virginica","Sepal.length"]
iris[iris["Species"]=="virginica","Sepal.length"]
iris[iris["Species"]=="virginica",1]
iris[iris["Species"]=="virginica","Sepa.length"]
colnames(A)=[a,b,c,d]
colnames(A)=c(a,b,c,d)
colnames(A)=c("a","b","c","d")
A
A[A[,1]==2,"a"]
colnames(iris)
iris[iris["Species"]=="virginica","Sepa.Length"]
iris[iris["Species"]=="virginica","Sepal.Length"]
mean(iris[iris["Species"]=="virginica","Sepal.Length"])
mean(iris[iris["Species"]=="virginica","Sepal.Length"],na.rm=TRUE)
rowMeans(iris)
rowMeans(iris[,1:4])
colMeans(iris[,1:4])
colMeans(iris[iris["Species"]=="virginica",1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
?mtcars
mtcars
mean(mtcars$mpg, mtcars$cyl)
?with
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- with(mtcars, tapply(mpg, cyl, mean))
x
x(8)-x(4)
x[8]-x[4]
x[8]
x["4"]
x["8"]-x["4"]
abs(x["8"]-x["4"])
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
hpcyl
abs(hpcyl[8]-hpcyl[4])
abs(hpcyl["8"]-hpcyl["4"])
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
debug(ls)
ls
ls()
q
stop
quit
qio()
quit()
quit
quit()
a
x
Q
ls()
cont
s
str(help)
str(mean)
summary(mean)
summary(A)
rnorm(2,4)
help(rpois)
system.time() Rprof()
system.time(Rprof)
Rprof
system.time(a==1)
Rprof
system.time(a==1)
sample.interval=10000
sample
help(table)
setwd("C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Getting and Cleaning data/Week 3")
imageQ2 <- readJPEG(system.file("img","getdata-jeff.jpg",package="jpeg"),TRUE)
library(jpeg)
imageQ2 <- readJPEG(system.file("img","getdata-jeff.jpg",package="jpeg"),TRUE)
system.file("img","getdata-jeff.jpg",package="jpeg")
image = system.file("img","getdata-jeff.jpg",package="jpeg")
image
readJPEG(image)
readJPEG("getdata-jeff.jpg")
imageQ2 <- readJPEG("getdata-jeff.jpg",TRUE)
imageQ2
Q2 <- quantile(imageQ2,na.rm=T, probs=c(0.3,0.8))
Q2
help(match)
url3_1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url3_2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url1,dest="./dataQuestion3_1.csv")
download.file(url1,dest="./dataQuestion3_2.csv")
dataQ3_1 <- read.csv("./dataQuestion3_1.csv")
dataQ3_2 <- read.csv("./dataQuestion3_2.csv")
url3_1 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url3_2 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url1,dest="./dataQuestion3_1.csv")
download.file(url1,dest="./dataQuestion3_2.csv")
dataQ3_1 <- read.csv("./dataQuestion3_1.csv")
dataQ3_2 <- read.csv("./dataQuestion3_2.csv")
url3_1 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url3_2 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url3_1,dest="./dataQuestion3_1.csv")
download.file(url3_1,dest="./dataQuestion3_2.csv")
dataQ3_1 <- read.csv("./dataQuestion3_1.csv")
dataQ3_2 <- read.csv("./dataQuestion3_2.csv")
View(dataQ3_1)
View(dataQ3_2)
names(dataQ3_1)
url3_1 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url3_2 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url3_1,dest="./dataQuestion3_1.csv")
download.file(url3_2,dest="./dataQuestion3_2.csv")
dataQ3_1 <- read.csv("./dataQuestion3_1.csv")
dataQ3_2 <- read.csv("./dataQuestion3_2.csv")'
''
url3_1 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url3_2 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url3_1,dest="./dataQuestion3_1.csv")
download.file(url3_2,dest="./dataQuestion3_2.csv")
dataQ3_1 <- read.csv("./dataQuestion3_1.csv")
dataQ3_2 <- read.csv("./dataQuestion3_2.csv")
View(dataQ3_2)
View(dataQ3_1)
dataQ3_1 <- dataQ3_1["Gross.domestic.product.2012"<=190]
View(dataQ3_1)
dataQ3_1 <- read.csv("./dataQuestion3_1.csv")
dataQ3_1 <- dataQ3_1[dataQ3_1$Gross.domestic.product.2012<=190]
names(dataQ3_1)
dataQ3_1 <- dataQ3_1["Gross.domestic.product.2012"<=190,]*
*
dataQ3_1 <- dataQ3_1["Gross.domestic.product.2012"<=190,]
"Gross.domestic.product.2012"<=190
dataQ3_1$Gross.domestic.product.2012<=190
dataQ3_1$Gross.domestic.product.2012
dataQ3_1$Gross.domestic.product.2012<190
vector(dataQ3_1$Gross.domestic.product.2012)<190
as.vector(dataQ3_1$Gross.domestic.product.2012)<190
match(dataQ3_1,dataQ3_2)
match(dataQ3_1$X,dataQ3_2$CountryCode)
match(dataQ3_2$CountryCode,dataQ3_1$X)
dataQ3_1 <- read.csv("./dataQuestion3_1.csv")
View(dataQ3_1)
help(download.file)
help(read.csv)
dataQ3_1 <- read.csv("./dataQuestion3_1.csv",skip=2)
View(dataQ3_1)
read.csv("./dataQuestion3_1.csv",skip=3)
dataQ3_1 <- read.csv("./dataQuestion3_1.csv",skip=3)
View(dataQ3_1)
dataQ3_1$ranking
dataQ3_1$Ranking
dataQ3_1$Ranking<=190
dataQ3_1$Ranking==190
dataQ3_1$Ranking<=190
is.na(dataQ3_1$Ranking)
is.missing(dataQ3_1$Ranking)
is.null(dataQ3_1$Ranking)
as.numeric(dataQ3_1$Ranking)<=190
as.numeric(dataQ3_1$Ranking)
type(dataQ3_1$Ranking)
types(dataQ3_1$Ranking)
attributes(dataQ3_1$Ranking)
dataQ3_1$Ranking
dataQ3_1$X
match(dataQ3_1$X,dataQ3_2$CountryCode)
which(!is.na(match(dataQ3_1$X,dataQ3_2$CountryCode)))
sum(!is.na(match(dataQ3_1$X,dataQ3_2$CountryCode)))
sum(!is.na(match(dataQ3_2$CountryCode,dataQ3_1$X)))
help(match)
