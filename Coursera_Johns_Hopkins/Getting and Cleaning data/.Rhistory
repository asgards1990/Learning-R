z$inv
z$ze
x
x <- makeCacheMatrix(x)
x
x$getInv
x$getInv()
cacheSolve(x)
x
x$getInv()
cacheSolve(x)
x$get()
x$get()
x
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/makeCacheMatrix.R')
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
x
x <- cbind(c(0,1),c(1,0))
x
x <- makeCacheMatrix(x)
x
x$get()
z$get()
x$get()
x
z
A <- cbind(c(0,1),c(1,0))
A
A <- makeCacheMatrix(A)
A
A$get()
A <- makeCacheMatrix(A)
A <- cbind(c(0,1),c(1,0))
A
x <- makeCacheMatrix(A)
A
x
A$get()
x$get()
x$getInv()
cacheSolve(x)
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Assignment_2/cacheSolve.R')
x
x$getInv
x$getInv()
source('C:/Users/sya/Desktop/ProgrammingAssignment2/cachematrix.R')
## of the instance makeCacheMatrix
## If an existing stored inverse already exists, no
source('C:/Users/sya/Desktop/ProgrammingAssignment2/cachematrix.R')
y
b
b <- makeCacheMatrix(y)
b
b$getInv()
cacheSolve(b)
z$getInv
z$getInv()
b$getInv()
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
?iris
rm(list=ls())
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
A=[1,2,2,1,3,5,4,1,2]
A==1
A=c(1,2,2,1,3,5,4,1,2)
A==1
A(A==1)
A[A==1]
iris
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
iris["virginica"]
iris["species"]
iris["Species"]
"abc"=="cde"
"abc"=="abc"
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
iris[iris["Species"]=="Virginica","Sepal.length"]
iris["Species"]=="Virginica"
iris[iris["Species"]=="virginica","Sepal.length"]
iris["Species"]
iris["Species"]=="virginica"
iris["Species"]=="virginica"
iris[iris["Species"]=="virginica","Sepal.length"]
iris
iris[iris["Species"]=="virginica","sepal.length"]
iris[iris["Species"]=="virginica";"Sepal.length"
iris[iris["Species"]=="virginica";"Sepal.length"]
A=[1,2,3;2;5;6]
A=c(c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6))
A
A=cbind(c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6),c(1,2,3,2,5,6))
A
A(A[,1]==2)
A[,1]
A[,1]==2
A(A[,1]==2,2)
A[A[,1]==2,2]
iris[iris[,"Species"]=="virginica","Sepal.length"]
iris[iris["Species"]=="virginica","Sepal.length"]
iris[iris["Species"]=="virginica",1]
iris[iris["Species"]=="virginica","Sepa.length"]
colnames(A)=[a,b,c,d]
colnames(A)=c(a,b,c,d)
colnames(A)=c("a","b","c","d")
A
A[A[,1]==2,"a"]
colnames(iris)
iris[iris["Species"]=="virginica","Sepa.Length"]
iris[iris["Species"]=="virginica","Sepal.Length"]
mean(iris[iris["Species"]=="virginica","Sepal.Length"])
mean(iris[iris["Species"]=="virginica","Sepal.Length"],na.rm=TRUE)
rowMeans(iris)
rowMeans(iris[,1:4])
colMeans(iris[,1:4])
colMeans(iris[iris["Species"]=="virginica",1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
?mtcars
mtcars
mean(mtcars$mpg, mtcars$cyl)
?with
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- with(mtcars, tapply(mpg, cyl, mean))
x
x(8)-x(4)
x[8]-x[4]
x[8]
x["4"]
x["8"]-x["4"]
abs(x["8"]-x["4"])
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
hpcyl
abs(hpcyl[8]-hpcyl[4])
abs(hpcyl["8"]-hpcyl["4"])
source('C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/quizz_Week_3.R')
debug(ls)
ls
ls()
q
stop
quit
qio()
quit()
quit
quit()
a
x
Q
ls()
cont
s
str(help)
str(mean)
summary(mean)
summary(A)
rnorm(2,4)
help(rpois)
system.time() Rprof()
system.time(Rprof)
Rprof
system.time(a==1)
Rprof
system.time(a==1)
sample.interval=10000
sample
setwd("C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins")
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”)
install.packages(RMySQL)
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "0609816234", dbname="db")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
hg <- dbConnect(MySQL(),user="genome", db = "hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
hg19 <- dbConnect(MySQL(),user="genome", db = "hg19",host="genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(),user="genome", db = "hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
test <- allTables["HInv"]
test
result <- dbGetQuery(db, "show databases;")
result <- dbGetQuery(db, "show databases;");
result <- dbGetQuery(hg19, "show databases;");
result
hg19
length(hg19)
test <- dbListTables(hg19)
length(test)
test <- dbListTables(ucscDb)
ucscDb
test1 <- ucscDb(db="hg19")
test1 <- ucscDb[db="hg19"]
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
query
affyMis
affyMis <- fetch(query, n = 10)
affyMis
View(affyMis)
dbClearQuery(query)
dbClearResult(query)
dbClearResult(query)
dbDisconnect(hg19)
dbDisconnect(uscDb)
dbDisconnect(usscDb)
dbDisconnect(ucscDb)
dbDisconnect(hg)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
library(httr)
myapp = oauth_app("twitter",key="yourConsumerKeyHere", secret="yourConsumerSecretHere")
sig = sign_oauth1.0(myapp, token="yourTokenHere", token_secret = "yourTokenSecretHere")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json, sig)
myapp = oauth_app("twitter",key="yourConsumerKeyHere", secret="yourConsumerSecretHere")
sig = sign_oauth1.0(myapp, token="yourTokenHere", token_secret = "yourTokenSecretHere")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages("rjson")
json2 = jsonlite::fromJSON(toJSON(json1))
library(rjson)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2
oauth_endpoints("github")
myapp <- oauth_app("github", "124d1a02661e8572afb3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
gtoken <- config(token = 7ba4a4b73c0f4fddf7d2584dd918f70faa4db13b)
gtoken <- config(token = "7ba4a4b73c0f4fddf7d2584dd918f70faa4db13b"")
""
gtoken <- config(token = "7ba4a4b73c0f4fddf7d2584dd918f70faa4db13b")
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
myapp
myapp <- oauth_app("github", "124d1a02661e8572afb3","5e791cd85979b0bce3b73bb9ad3157bde0eff1a7")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
contents <- content(req)
contents
data <- jsonlite::fromJSON(toJSON(contents))
data
View(data)
data[name=datasharing]
data["name=datasharing"]
data[name="datasharing"]
data(name="datasharing")
data,[name="datasharing"]
data[,name="datasharing"]
data[,"datasharing"]
data[,name]
colnames(data)
type(data)
istype(data)
isType(data)
attribute(data)
attributes(data)
data$name
data[,name=datasharing]
data[,name==datasharing]
data[,name=datasharing]
data[,"name"]
data[,"name"="datasharing"]
names = data[,"name"]
length(names)
data[["name"]]
data[1]
which(data[1, ] == 2)
data[1,]
data[,1]
data[,"name"]
data[,"name"]=="datasharing"
data[data[,"name"]=="datasharing","created_at"]
getwd()
setwd("C:/Users/sya/Desktop/Learning-R/Coursera_Johns_Hopkins/Getting and Cleaning data")
acs = load("getdata-data-ss06pid")
acs = load("getdata-data-ss06pid.csv")
getwd()
load("getdata-data-ss06pid.csv")
acs <- load("getdata-data-ss06pid.csv")
acs
acs <- load("getdata-data-ss06pid")
acs <- load("getdata-data-ss06pid.csv")
acs <- read.csv("getdata-data-ss06pid.csv")
acs
sqldf("select * from acs where AGEP < 50 and pwgtp1")
install.packages("sqldf")
library(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")*
z
sqldf("select * from acs where AGEP < 50 and pwgtp1")
install.packages("sqldf")
install.packages("sqldf")
DF <- data.frame(a = 1:5, b = letters[1:5])
library(sqldf)
library(sqldf)
library(sqldf)
sqldf("select * from DF")
library(RMySQL)
MySQL. <- MySQL()
MySQLcon <- dbConnect(MySQL., user='thisuser', password='thispassword',
dbname='desiredDB')
library(RMySQL)
MySQL. <- MySQL()
MySQLcon <- dbConnect(MySQL., user='urootr', password='0609816234',
dbname='acs')
library(RMySQL)
MySQL. <- MySQL()
MySQLcon <- dbConnect(MySQL., user='uroot', password='0609816234',
dbname='acs')
library(RMySQL)
MySQL. <- MySQL()
MySQLcon <- dbConnect(MySQL., user='root', password='0609816234',
dbname='acs')
library(RMySQL)
MySQL. <- MySQL()
MySQLcon <- dbConnect(MySQL.,
dbname='acs')
library(RMySQL)
MySQL. <- MySQL()
MySQLcon <- dbConnect(MySQL., user='root', password='0609816234',
dbname='elevage')
acs
titanic <- data(titanic3, package="PASWR")
install.packages("PASWR")
data(titanic3, package="PASWR")
attributes(titanic3)
sqldf('select age, count(*) from titanic3 where age is not null group by age')
help(sqldf)
sqldf('select age, count(*) from titanic3 where age is not null group by age',host="localhost")
sqldf("select age, count(*) from titanic3 where age is not null group by age")
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R") # as per FAQ #5 use R code rather than tcltk
library(RMySQL)
library(sqldf)
sqldf('select age, count(*) from titanic3 where age is not null group by age')
sqldf("select * from acs where AGEP < 50 and pwgtp1")
names(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
results <-sqldf("select pwgtp1 from acs where AGEP < 50")
head('results')
head(results)
help(unique)
distinct = sqldf("select distinct AGEP from acs")
unique = unique(acs$AGEP)
attributes(unique)
unique
distinct
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct pwgtp1 from acs")
library(XML)
url="http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url,useInternalNodes=T)
install.packages("XML")
library(XML)
url="http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url,useInternalNodes=T)
html
html[100]
html(100)
capture.output(html)
linesTable <- capture.output(html)
nChar(linesTable[0])
nChar(linesTable[1])
nchar(linesTable[0])
nchar(linesTable[1])
nchar(linesTable[10])
nchar(linesTable[20])
nchar(linesTable[30])
nchar(linesTable[100])
linesTable[10]
nchar(linesTable[9])
nchar(linesTable[11])
linesTable[100]
nchar(linesTable[100])
linesTable[30]
nchar(<meta name="Robots" content="index,follow" />)
nchar("<meta name="Robots" content="index,follow" />")
nchar("<meta name=\"Robots\" content=\"index,follow\" />")
html <- htmlTreeParse(url)
linesTable <- capture.output(html)
nchar(linesTable[10])
linesTable
html <- htmlTreeParse(url,useInternalNodes=T)
linesTable <- capture.output(html)
linesTable
html
con = url(url)
htmlCode = readLines(con)
htmlCode
linesTable = readLines(con)
nchar(linesTable[10])
nchar(linesTable[20])
nchar(linesTable[30])
nchar(linesTable[100])
load("getdata-wksst8110.for")
read.table("getdata-wksst8110.for")
help(read.fwf)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(12, 7,4, 9,4, 9,4, 9,4,5))
x <- read.fwf(
"getdata-wksst8110.for")
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(5,5,5,5))
x[,4]
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(5,5,5,15))
x[,4]
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(5,5,5,0))
x[,4]
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(5,5,5,100))
x[,4]
sum(x[,4])
help(4)
help(sum)
sum(x[,4],na.rm=TRUE)
x[,4]
attributes(x[,4])
x <- asvector(x)
x <- asVector(x)
x <- as.vector(x)
x*
s
x
x[,4]
sum(x[,4])
vector <- as.vector(x[,4])
sum(vector)
is.vector(vector)
sum(vector,na.rm=TRUE)
as.integer(vector)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(5,5,5,5))
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(5,5,5,100))
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(100,5,5,100))
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(9,8,8,8))
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(10,8,8,8))
View(A)
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(12,8,8,8))
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(12,7,8,8))
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
widths=c(12, 7,4, 9,4, 9,4, 9,4))
View(x)
x <- read.fwf(
"getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
View(x)
vector <- as.vector(x[,4])
vector
sum(vector)
